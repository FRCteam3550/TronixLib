// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc3550.Julius2018;

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import com.ctre.phoenix.motorcontrol.can.WPI_TalonSRX;
//import com.kauailabs.navx.frc.AHRS;

import edu.wpi.first.wpilibj.DigitalInput;
import edu.wpi.first.wpilibj.DoubleSolenoid;
import edu.wpi.first.wpilibj.Encoder;
//import edu.wpi.first.wpilibj.SPI;
import edu.wpi.first.wpilibj.SpeedController;
//import edu.wpi.first.wpilibj.SpeedControllerGroup;
import edu.wpi.first.wpilibj.VictorSP;
import edu.wpi.first.wpilibj.Compressor;
import edu.wpi.first.wpilibj.CounterBase.EncodingType;
//import edu.wpi.first.wpilibj.drive.DifferentialDrive;
import edu.wpi.first.wpilibj.DoubleSolenoid.Value;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
/**
 * The RobotMap is a mapping from the ports sensors and actuators are wired into
 * to a variable name. This provides flexibility changing wiring, makes checking
 * the wiring easier and significantly reduces the number of magic numbers
 * floating around.
 */
public class RobotMap {
	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
	
	public static SpeedController RearLeft;
	public static SpeedController RearRight;
	public static SpeedController FrontLeft;
	public static SpeedController FrontRight;
	//public static SpeedControllerGroup m_leftMotors;
	//public static SpeedControllerGroup m_rightMotors;
	//public static DifferentialDrive m_drive;
	
	public static SpeedController m_PinceRight;
	public static SpeedController m_PinceLeft;
	public static SpeedController m_Grimpeur;
	
	public static SpeedController ChainMotor;
	public static SpeedController PoulieMotor;
	public static DigitalInput PetitCadreUp;
	public static DigitalInput PetitCadreDown;
	public static DigitalInput GrandCadreUp;
	public static DigitalInput GrandCadreDown;
	
	// public static DigitalInput cubeDetect;
	public static Encoder m_rightEncoder;
	public static Encoder m_leftEncoder;
	
	public static Compressor compresseur;
	
	public static DoubleSolenoid LeftMotorSolenoid;
	public static DoubleSolenoid PinceOF;//Pince Ouvert/Fermer
	public static DoubleSolenoid PinceMD;//Pince Monter/Descendre
    public static DoubleSolenoid mLeds;
	public static DigitalInput CubePresence;
	public static DigitalInput PhotoSwitchCube;
	public static DoubleSolenoid Leds;
	//public static DigitalInput CubeIn;
	//public static AHRS ahrs;

	
	// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

	public static void init() {
		// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS

		m_PinceLeft = new VictorSP(8); // for 2018 robot
		m_PinceRight = new VictorSP(9); // 3 for 2018 robot
		
		
		RearLeft = new WPI_TalonSRX(1);
		FrontLeft = new WPI_TalonSRX(2);
		RearRight = new WPI_TalonSRX(5);
		FrontRight = new WPI_TalonSRX(6);
		
		//FrontLeft.setInverted(false);
		//RearRight.setInverted(true);
		//FrontRight.setInverted(false);
		
		//m_leftMotors = new SpeedControllerGroup(FrontLeft, RearLeft);
		//m_rightMotors = new SpeedControllerGroup(FrontRight, RearRight);
		
		m_Grimpeur = new WPI_TalonSRX(3);
		PoulieMotor = new WPI_TalonSRX(4);
		ChainMotor = new WPI_TalonSRX(7);
		
		
		PhotoSwitchCube = new DigitalInput(6);//was 0
		CubePresence = new DigitalInput(7); // was 1
		GrandCadreUp = new DigitalInput(2);
		PetitCadreUp = new DigitalInput(3);
		PetitCadreDown = new DigitalInput(4); //Value is 4
		GrandCadreDown = new DigitalInput(5); //Value is 5
		
		//CubeIn = new DigitalInput(2);
		
		compresseur = new Compressor(0);
		
		
		PinceMD = new DoubleSolenoid(0, 1);//desactiver
		PinceOF = new DoubleSolenoid(2, 3);
		LeftMotorSolenoid = new DoubleSolenoid(4, 5);
		mLeds = new DoubleSolenoid(6, 7);

		m_rightEncoder = new Encoder(1, 0, true, EncodingType.k4X);
		m_leftEncoder = new Encoder(9, 8, false, EncodingType.k4X);
		
		//CubePresence = new DigitalInput(1);
		//PhotoSwitchCube = new DigitalInput(0);
		//CubeIn = new DigitalInput(2);
		
		//ahrs = new AHRS(SPI.Port.kMXP); 
		 
		compresseur.setClosedLoopControl(true);
	
		//m_leftMotors.setInverted(true);
		//m_drive = new DifferentialDrive(m_leftMotors, m_rightMotors);
		//m_drive.setSafetyEnabled(true);
		//m_drive.setExpiration(0.1);
		//m_drive.setMaxOutput(1.0);
	}
}
